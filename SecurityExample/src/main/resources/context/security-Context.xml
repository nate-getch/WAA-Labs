<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<!-- enable Method level [vs URL level] authorization  This work for ROOT WEB APPLICATION Level scanned components
      Does NOT recognize WEB Application level components - for THAT  need to place enable line in Dispatcher-servlet-->
	<security:global-method-security pre-post-annotations="enabled"/>	

<!-- security:http enables security filter mechanism...name space configuration is activated -->
<!-- use-expressions enables URL level authorization - allows SPEL syntax-->
	<security:http use-expressions="true">
	
	<!-- if  non-standard ports for HTTP and/or HTTPS, you can specify them here  -->
<!-- 	    <security:port-mappings>
      		<security:port-mapping http="9080" https="9443"/>
    	</security:port-mappings>
 -->	

 	<!-- BASIC login -->
 <!-- 	 		<security:form-login />  
  -->	
 	
	<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
	<!-- the more specific rules need to come first, followed by the more general ones. -->
	<!-- COMMENT out the following to see @Service METHOD level authorization -->
	  <security:intercept-url pattern="/members/add" access="hasRole('ROLE_ADMIN')"/>  	
	  <security:intercept-url pattern="/members" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"  />
<!-- Switch to HTTPS -->
 <!-- 	  <security:intercept-url pattern="/login" access="isAnonymous()" requires-channel="https"/>
 	  <security:intercept-url pattern="/logout" access="isAuthenticated()" requires-channel="http"/>
 --> 	
 	<!-- BASIC login -->
 	 	<!-- 	<security:form-login />   -->
 	
	
		<!-- always-use-default-target overrides where login was triggered routes to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username,password,login-processing  renames j_security_* stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url-->
 <!-- comment out the next few lines for BASIC Login -->
  		<security:form-login 
 		 login-page="/login" 
				login-processing-url="/postLogin"
				username-parameter="username" 
				password-parameter="password"
 			    default-target-url="/welcome"    
               always-use-default-target="true"   
               authentication-failure-url="/loginfailed"/>
 <!-- END of comment out  for BASIC Login -->
 
    
         <security:logout logout-success-url="/logout" 
          delete-cookies="JSESSIONID" logout-url= "/doLogout"/>
       
		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout 
					logout-url= "/doLogout" REPLACES it 
		NOTE: is it JUST a URL naming convention - no mapping occurs
		-->
		   <!-- enable remember me -->
 	<security:remember-me data-source-ref="dataSource" 
	             token-validity-seconds="86400" remember-me-parameter="keepMe"/>
	
<!-- Version 4.0 + enables CSRF so if we want to disable-->
<!-- 		<security:csrf disabled="true"/> -->
 	</security:http>
 
	
 <!-- Database security "custom queries are because we have used our own schema...	-->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
			<security:password-encoder ref="passwordEncoder" />
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from credentials where username=?"
				authorities-by-username-query="select u1.username, u2.authority from credentials u1, authority u2 where u1.username = u2.username and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" >
	</bean>
 </beans>
